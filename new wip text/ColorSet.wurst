package ColorSet
import JTML
import IterableMap
import StringUtils

constant DELIMITER = ":" 

public class ColorSet
    protected static let colorSets = new IterableMap<string, ColorSet>()
    protected static let DEFAULT = new ColorSet("default")
    protected static var selectedSet = DEFAULT
    protected IterableMap<string, string> map

    static function find(string colorName) returns string
        if colorName.startsWith("#")
            return "|cFF" + colorName.substring(1, 7)
        if not selectedSet.map.has(colorName)
            if DEFAULT.map.has(colorName)
                 return DEFAULT.map.get(colorName) 
            else
                let splitList = colorName.split(DELIMITER)
                let prefix = splitList.get(0).trim()
                let color = splitList.get(1).trim()
                destroy splitList

                let colorSet = colorSets.get(prefix)
                if colorSet != null
                    let foundColor = colorSet.map.get(color)
                    if foundColor != null
                        return colorSet.map.get(color)
                    else
                        return ""
                else
                    return ""
        else
            return selectedSet.map.get(colorName)
        
    function add(string name, color rgb)
        map.put(name, rgb.toColorString())

    function add(string name, int r, int g, int b)
        add(name, color(r, g, b))

    function add(string name, string colorString)
        map.put(name, "|cff" + colorString)

    construct(string name)
        map = new IterableMap<string, string>()
        colorSets.put(name, this)

    @compiletime static function initialize()
        DEFAULT 
        ..add("em"    , "ffcc00") // Golden highlights on tooltips
        ..add("ac"    , "c3dbff") // Autocast blue color
        ..add("f"     , "fed312") // Top button menu

        for i=0 to 11
            DEFAULT.add("p" + i.toString(), playercolors[i])

        new ColorSet("human")
        ..add("em"    , 0, 0, 255)

        new GlobalTagRegistry()..add("c", false, (JTMLElement e) -> ColorSet.find(e.getAttr(0)) + e.getText() + "|r")

init
    ColorSet.initialize()

@Test function test()
//    print("<spaceout><c human:em>HAI!</c></spaceout>".process())