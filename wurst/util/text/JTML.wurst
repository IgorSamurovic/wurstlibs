package JTML
import IterableMap
import LinkedList
import StringUtils 
import ClosureTimers

constant BRACKET_OPEN     = "<"
constant BRACKET_CLOSED   = ">"
constant ESCAPE_CHAR      = "\\"
constant CLOSING_TAG      = "/"
constant VALUE_ASSOCIATOR = "="
constant QUOTATION_MARK   = "\""

public class TagRegistry

    static constant let DEFAULT = new TagRegistry()
    static constant let DOM = new TagTemplate("DOM", false, (JTMLElement e) -> e.text)

    let map = new IterableMap<string, TagTemplate>()

    function getMap() returns  IterableMap<string, TagTemplate> 
        return map

    function findTag(string name) returns TagTemplate
        return map.has(name) ? map.get(name) : DOM

    function add(TagTemplate tagTemplate)
        map.put(tagTemplate.name, tagTemplate)

    function add(string name, bool empty, JTMLElementClosure closure)
        map.put(name, new TagTemplate(name, empty, closure))

    @compiletime static function initialize()
        DEFAULT
        ..add(DOM)
        ..add("br", true, (JTMLElement e) -> "|n")
        ..add("upper", false, (JTMLElement e) -> e.text.toUpperCase())
        ..add("lower", false, (JTMLElement e) -> e.text.toLowerCase())
        ..add("dec", false, (JTMLElement e) -> begin
            string val = e.text
            var decimals = e.getAttr(0).toInt()
            let index = e.text.indexOf(".")
            if index != -1
                let endindex = index + decimals + 1
                var maxIndex = val.length()
                while endindex > maxIndex
                    val += "0"
                    maxIndex++ 
                val = val.substring(0, IMinBJ(endindex, maxIndex))
            return val
        end)
        ..add("spaceout", false, (JTMLElement e) -> begin
            string val = ""
            var num = e.attr.get("num").toInt()
            if num == 0
                num = 1
            var addon = ""
            for i=1 to num
                addon += " "
            for i=0 to e.text.length() -1
                if i != e.text.length() -1
                    let tag = e.text.substring(i, i + 2)
                    if tag == "|c"
                        val += e.text.substring(i, i + 9)
                        i += 8
                    else if tag == "|r" or tag == "|n"
                        val += tag
                        i += 2
                    else 
                        val += e.text.charAt(i)
                        if i != e.text.length() - 1 
                            val += addon
            return val
        end)

init
    TagRegistry.initialize()

public class JTMLElement
    protected TagTemplate tagTemplate
    protected string text
    protected IterableMap<string, string> attr

    /** Returns the value of an attribute at a specific position. */
    function getAttr(int index) returns string
        if index < attr.getKeys().getSize()
            return attr.getKeys().get(index)
        else
            return ""

    /** Returns the value of an attribute with a specific name. */
    function getAttr(string name) returns string
        if attr.has(name)
            return attr.get(name)
        else
            return ""

    /** Returns the text to be processed by this tag. */
    function getText() returns string
        return text

    function process(TagRegistry tagRegistry) returns string
        text = text.process(tagRegistry)
        return tagTemplate.closure.run(this)

    construct(TagTemplate tagTemplate, IterableMap<string, string> attr, string text)
        this.tagTemplate = tagTemplate
        this.attr = attr
        this.text = text

    ondestroy
        if attr != null
            destroy attr

public interface JTMLElementClosure
    function run(JTMLElement e) returns string

public class TagTemplate
    protected string name
    protected bool empty
    protected JTMLElementClosure closure

    function getName() returns string
        return name

    construct(string name, bool empty, JTMLElementClosure closure)
        this.name = name
        this.empty = empty
        this.closure = closure

class Tag
    protected TagTemplate template
    protected string text = ""
    protected string name = ""
    protected bool ending = false
    protected int startIndex
    protected int endIndex
    
    let attr = new IterableMap<string, string>()

    function needsClose() returns bool
        return not ending and template.empty

    function process(TagRegistry registry, string content)
        text = content//.trim()

        let splittext = text.split(" ")
        let iter = splittext.iterator()
        
        let first = iter.next().trim()
        if first == CLOSING_TAG
            ending = true 
            name = iter.next()
        else if first.startsWith(CLOSING_TAG)
            ending = true
            name = first.replace(CLOSING_TAG, "")
        else
            name = first

        template = registry.findTag(name)
        if template != TagRegistry.DOM
            for str from iter
                if str != "" and str != " "
                    if str.contains(VALUE_ASSOCIATOR)
                        str = str.replace(" ", "")
                        let split = str.split(VALUE_ASSOCIATOR)
                        attr.put(split.get(0).trim(), split.get(1).replace(QUOTATION_MARK, "").trim())
                        destroy split
                    else
                        attr.put(str.trim(), "")
        
        iter.close()
        destroy splittext


public function string.process(TagRegistry tagRegistry) returns string
    Tag startTag = null
    Tag endTag
    Tag newTag

    int endingBuffer = 0

    int newRawStringStartIndex = 0
    string processed = ""

    for i = 0 to this.length() - 1
        // Initializing variables for ease of use
        var char = this.charAt(i)
        var lastChar = i == 0 ? "" : this.charAt(i - 1)

        // Checking if the character is perhaps escaped
        if lastChar != "\\"
            // Checking if the character is the start of a tag
            if char == "<"
                for j = i to this.length() - 1
                    char = this.charAt(j)

                    if char == ">" and this.charAt(j - 1) != "\\"
                        newTag = new Tag()
                        newTag.startIndex = i
                        newTag.endIndex = j
                        
                        i = j

                        newTag.process(tagRegistry, this.substring(newTag.startIndex + 1, newTag.endIndex))
                        
                        if newTag.ending
                            if startTag != null
                                endTag = newTag
                                if startTag.name== endTag.name
                                    if endingBuffer <= 0
                                        let elem = new JTMLElement(
                                            startTag.template,
                                            startTag.attr,
                                            this.substring(startTag.endIndex+1, endTag.startIndex))

                                        processed += this.substring(newRawStringStartIndex, startTag.startIndex)
                                        processed += elem.process(tagRegistry)
                                        
                                        newRawStringStartIndex = endTag.endIndex + 1

                                        destroy elem
                                        destroy startTag
                                        destroy endTag

                                        startTag = null
                                    else
                                        endingBuffer--
                                        destroy newTag
                                else
                                    destroy newTag
                            else
                                destroy newTag
                        else
                            if startTag == null
                                startTag = newTag
                                if startTag.template.empty
                                    let elem = new JTMLElement(startTag.template, null, "")
                                    processed += this.substring(newRawStringStartIndex, startTag.startIndex)
                                    processed += elem.process(tagRegistry)
                                    destroy elem
                                    newRawStringStartIndex = startTag.endIndex + 1
                                    destroy startTag
                                    startTag = null
                            else
                                if startTag.name == newTag.name
                                    endingBuffer++
                                
                        i = j 
                        break
    
    if startTag != null
        let elem = new JTMLElement(startTag.template, startTag.attr, this.substring(startTag.endIndex + 1, this.length()))
        processed += elem.process(tagRegistry)
        newRawStringStartIndex = this.length()
        destroy startTag
        destroy elem

    processed += this.substring(newRawStringStartIndex, this.length())
    return processed

public function string.process() returns string
    return this.process(TagRegistry.DEFAULT)

@test function test()
    //print("Learn ThisSpell - [<c em>Q</c>] - [<c em>Level {lvl}</c>]".r("lvl", "3").process())

init
    nullTimer(()-> test())

public function string.replaceAll(IterableMap<string, string> map) returns string
    var retVal = this
    for key in map
        retVal = retVal.replace("{" + key + "}", map.get(key))
    return retVal

/* Remove from JTML */
public function string.getAllTemplateFields() returns LinkedList<string>
    let list = new LinkedList<string>
    
    var starts = new LinkedList<int>()
    int endIndex

    var index = 0
    for char in this
        if char == "{"
            starts.add(index + 1)
        if char == "}" and starts.getSize() > 0
            endIndex = index
            list.add((this.substring(starts.pop(), endIndex).trim()))

        index++

    destroy starts
    return list

public function string.r(string key, string value) returns string
    return this.replace("{" + key + "}", value)

public function string.r(string key, LinkedList<string> values, string separator) returns string
    return this.replace("{" + key + "}", values.joinBy(separator))

public function string.r(string key, LinkedList<string> values) returns string
    return this.r(key, values, ", ")


