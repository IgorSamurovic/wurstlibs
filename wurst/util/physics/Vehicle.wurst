package Vehicle
import MapModule
import BatchProcessing
import ClosureTimers
import Object2D
import VectorExtension
import MathExtension
import Blockers

constant ENUM_RECT = Rect(-256, -256, 256, 256)

public Vehicle COLLIDER

public class Vehicle
    use MapModule<unit>
    use BatchProcessing

    static let TIMESTEP = 0.01

    protected unit u
    protected vec2 pos
    protected vec2 forces = vec2(0, 0)
    protected angle direction = angle(0)
    protected angle facing = angle(0)
    protected angle targetAngle = angle(0)
    protected real speed = 0
    protected real accel = 20
    protected real boostAccel = 0
    protected real brakingAccel = -10
    protected real maxSpeed = 2000
    protected bool braking = false
    protected Rectangle coll = new Rectangle(vec2(0,0), vec2(80, 60), angle(0))

    function boost()
        boostAccel = 400

    function brake(bool wantBrake)
        braking = wantBrake

    function steer(angle target)
        targetAngle = target

    function testCrashes()
        /*
        MoveRectTo(ENUM_RECT, pos.x, pos.y)
        COLLIDER = this
        EnumDestructablesInRect(ENUM_RECT, null, () -> begin 
            let block = Blocker.of(GetEnumDestructable())
            let r = block.getRectangle()
        end)*/

    function updateCollision()
        testCrashes()
        coll.setAngle(direction)
        coll.setCenter(pos)
        coll.update()

        // Collide
        ENUM_GROUP.enumUnitsInRange(pos, 300)
        for v in ENUM_GROUP
            if v != u
                let veh = Vehicle.of(v)
                let coll = veh.coll
                if this.coll.checkCollision(coll)
                    let ang = this.pos.angleTo(veh.pos)
                    let take = 0.5
                    let give = 0.5

                    var currentInertia = vec2(forces.x * ang.cos(), forces.y * ang.sin())
                    var currentAnotherInertia = vec2(veh.forces.x * ang.cos(), veh.forces.y * ang.sin())

                    veh.forces += give * currentInertia
                    veh.forces -= give * currentAnotherInertia
        
                    forces += take * currentAnotherInertia
                    forces -= take * currentInertia

                    let dist = pos.distanceTo(veh.pos) * 0.25

                    veh.pos = veh.pos.polarOffset(ang , dist)
                    pos = pos.polarOffset(ang - angle(PI), dist)

    override function process()
        updateCollision()

        // Increase speed with acceleration
        speed += accel + boostAccel
        if speed > maxSpeed
            speed = maxSpeed

        if boostAccel > 0
            boostAccel *= 0.95

        // Apply braking
        if braking 
            speed += brakingAccel
            if speed < 0
                speed = 0

        // Apply the angle
    
        var diff2 = targetAngle - facing
        diff2 = angle((diff2 + angle(PI)).radians % PI2 - PI)
        //let multi2 = (PI/ (PI + 0.01 * diff2.radians.abs())) * 0.02 * (1 - speed/(maxSpeed * 2))
        let multi2 = 0.05
        facing += multi2 * diff2
        
        forces += ZERO2.polarOffset(direction, (boostAccel + accel) * TIMESTEP)
        speed = forces.length()

        direction = facing

        // Apply friction
        forces *= 0.99

        pos += forces
        u.setPos(pos)
        u.setFacing(facing)

    construct(unit u)
        this.u = u
        this.pos = u.getPos()
        attachTo(u)

Vehicle veh

Vehicle array vehs

init
    doPeriodically(Vehicle.TIMESTEP, (CallbackPeriodic cb) -> Vehicle.processAll())

    Cheat("iseedeadpeople")

    let u = createUnit(Player(0), 'hpea', vec2(0, 0), angle(0))
    SetCameraTargetController(u, 0, 0, false)
    veh = new Vehicle(u)
    u.setPathing(false)

    doPeriodically(Vehicle.TIMESTEP, (CallbackPeriodic cb) -> begin
        //SetCameraField(CAMERA_FIELD_ANGLE_OF_ATTACK, 340, 0)
        //SetCameraField(CAMERA_FIELD_ROTATION, veh.facing.degrees(), 0) 
    end)

    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER)
        ..addAction(() -> begin 
            if GetIssuedOrderId() == 851971 // smart
                Vehicle.of(GetTriggerUnit()).steer(GetTriggerUnit().getPos().angleTo(vec2(GetOrderPointX(), GetOrderPointY())).normalize())
                Vehicle.of(GetTriggerUnit()).accel = 20
        end)

    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER)
        ..addAction(() -> begin 
            
            if GetIssuedOrderId() == 851993 // smart
                Vehicle.of(GetTriggerUnit()).boost()
        end)
    
    var ang = 0.

    for i=0 to 2
        vehs[i] = new Vehicle(createUnit(Player(i+2), 'hpea', vec2(0, 0).polarOffset(angle(i*PI2/10), 1000), angle(0))..setPathing(false))
        vehs[i].accel = 0
    doPeriodically(1, (CallbackPeriodic cb) -> begin 
        ang += PIFOURTH
        for i = 0 to 2
            vehs[i].steer(angle(ang))
    end)