package BatchProcessing
import ClosureTimers
import TimerUtils

public module BatchProcessing
	static thistype zz__first = null
	static thistype zz__last = null
	static int zz__size = 0
	thistype zz__prev
	thistype zz__next

	protected static timer zz__timer = getTimer() 
	protected static real TIMEOUT = 1.0
	protected static bool running = false

	abstract static function getTimeout() returns real

	/** A function that is called to process every instance in the loop. */
	function process()

	/** A function called by the timer to process all instances. */
	static function processAll()
		var obj = zz__first
		while obj != null
			obj.process()
			obj = obj.zz__next

	construct() 
		if zz__size == 0
			print("START!")
			start()
			print("STARTED??")
		zz__size++
		if zz__size == 1
			zz__first = this
			zz__prev = null	
		else
			zz__prev = zz__last
			zz__last.zz__next = this
			zz__first.zz__prev = this
		zz__next = null
		zz__last = this
				
	ondestroy
		zz__size--
		if this != zz__first
			zz__prev.zz__next = zz__next
		else
			zz__first = zz__next
		if this != zz__last
			zz__next.zz__prev = zz__prev	
		else
			zz__last = zz__prev
		if zz__size == 0
			stop()

	static function start()
		print("STARTED?")
		zz__timer 
			..startPeriodic(TIMEOUT, function processAll)

	static function stop()
		zz__timer 
			..pause()