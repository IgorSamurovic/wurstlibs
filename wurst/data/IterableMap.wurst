package IterableMap 
import LinkedList
import HashMap
import Wurstunit

import public TypeCasting
import public Table

/** Generic Table Wrapper */
public class IterableMap<K,V> extends HashMap<K, V>
 	private let keys = new LinkedList<K>()

 	function iterator() returns LLIterator<K>
 	 	return keys.iterator()

 	function staticItr() returns LLStaticIterator<K>
 	 	return keys.staticItr()

	function isKeyUsed(K key) returns bool
		return keys.contains(key)

 	/** Saves the given value under the given key */
	override function put(K key, V value)
 	 	super.put(key, value)
		if not keys.contains(key)
 	 	 	keys.add(key)
	
	/** Removes the value saved under the given key */
	override function remove(K key)
		super.remove(key)
 	 	if keys.contains(key)
 	 	 	keys.remove(key)

 	ondestroy
 	 	destroy keys