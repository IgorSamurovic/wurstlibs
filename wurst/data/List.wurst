package List
import LinkedList
import TypeCasting

/** Splits the string by another string 
	"this..is..an..example" split by the string ".." splits into a list containing four strings ["this", "is", "an", "example"] */
public function string.splitEx(string splitBy) returns List<string>
	let list = new List<string>
	let offset = splitBy.length()
	var str = this
	while true
		let splitIndex = str.indexOf(splitBy)
		if splitIndex == -1
			list.add(str)
			break
		let first  = str.substring(0, splitIndex)
		let second = str.substring(splitIndex + offset, str.length())
		list.add(first)
		str = second
	return list

/** Joins elements from a string list into one string using a separator */
public function List<string>.joinBy(string separator) returns string
	var joined = ""
	var first = true
	let iter = this.iterator()
	
	for str from iter
		if iter.hasNext() or not first
			joined += str + separator
		else
			joined += str
			first = false
			
	iter.close()
	return joined

/** Joins elements from a string list into one string */ 
public function List<string>.join() returns string
	return this.joinBy("")


public interface ListComparator<T>
	function compare(T obj1, T obj2) returns bool

public class List<T> extends LinkedList<T>

    function clone() returns LinkedList<T>
        let list = new List<T>
        for obj in this
            list.add(obj)
        return list

    function sortBy(ListComparator<T> comp)
        for i=0 to this.getSize() - 2
            let current = this.get(i)
            var lowest = current
            var lowestId = i
            for j = i + 1 to this.getSize() - 1
                let frag = this.get(j)
                if comp.compare(frag, lowest)
                    lowest = frag
                    lowestId = j
            if current != lowest
                this.set(i, lowest)
                this.set(lowestId, current)

@Test function testSort()
    let list = new List<int>
    list
        ..add(0)
        ..add(-500)
        ..add(500)
        ..add(1000)
        ..add(-1000)
        /*
        ..add("d")
        ..add("a")
        ..add("c")
        ..add("x")
        ..add("ggdsga")
        ..add("e")
        ..add("f")
        ..add("b")
        ..add("z")
        */

    //list.sort((int obj1, int obj2) -> obj1 < obj2)
    list.sort()
    for i=0 to list.getSize() - 1
        print(list.get(i))


function List<string>.sort()
    this.sortBy((string str1, string str2) -> begin
        bool doSwap = false
        for i=0 to str1.length() -1
            if str2.length() < i + 1
                break
            if str1.charAt(i).toCharsetInt() < str2.charAt(i).toCharsetInt()
                doSwap = true
                break
        return doSwap
    end)

function List<int>.sort()
    this.sortBy((int int1, int int2) -> int1 < int2)